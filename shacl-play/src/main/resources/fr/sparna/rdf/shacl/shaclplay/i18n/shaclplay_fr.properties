window.app=SHACL Play!

navbar.brand=SHACL Play!
navbar.validate=Valider
navbar.shapes-catalog=Catalogue de Shapes
navbar.rules-catalog=Catalogue de Règles
navbar.convert=Convertir
navbar.draw=Dessiner
navbar.doc=Générer une doc
navbar.rules=Afficher des règles
navbar.sparql=Requêtes Sparql



validate.home.card-title=Valider les données RDF à l'aide de SHACL
validate.home.card-title.help=Obtenez un rapport lisible par l'homme à partir d'une validation SHACL. \
Téléchargez votre RDF ou validez le fichier RDF en ligne à une URL. Téléchargez également un rapport CSV ou un rapport SHACL Turtle brut.
validate.home.validate=Valider

validate.title=Validation RDF
validate.title.validateWith=Valider avec
validate.inputData.title=RDF à valider
validate.inputData.upload=Uploader
validate.inputData.upload.select=Sélectionner un fichier
validate.inputData.upload.change=Modifier
validate.inputData.upload.remove=Annuler
validate.inputData.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML. Vous pouvez aussi envoyer des fichiers <em>zip</em>.
validate.inputData.url=URL
validate.inputData.url.placeholder=http://... (URL du fichier RDF)
validate.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus. <br />\
Par exemple, vous pouvez essayer de valider <a href="#" onclick="$('#inputUrl').val('https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl');enabledInput('inputUrl');" title="https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl">les données du catalogue de Shapes</a>\
, avec la Shape "SHACL Play! Catalog Shapes" dans la liste ci-dessous.
validate.inputData.inline=Copier/coller le RDF
validate.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

validate.shapes.title=Shapes
validate.shapes.upload=Uploader
validate.shapes.upload.select=Sélectionner un fichier
validate.shapes.upload.change=Modifier
validate.shapes.upload.remove=Annuler
validate.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
validate.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue</a>
validate.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shacl-catalog.ttl">catalogue dans Github</a>.
validate.shapes.url=URL
validate.shapes.url.placeholder=http://... (URL du fichier SHACL)
validate.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
validate.shapes.inline=Copier/coller les règles SHACL
validate.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

validate.options.title=Options
validate.options.infer=Activer l'inférence OWL-Micro avant validation
validate.options.infer.help=Si les données à valider contiennent l'ontologie, vous pouvez activer une <a href="https://jena.apache.org/documentation/inference/#owl">inférence OWL-Micro</a> sur les données avant d'exécuter la validation. /!\ l'inférence peut être très longue
validate.options.closeShapes=Monde fermé (ajoute sh:closed sur les NodeShape)
validate.options.closeShapes.help=Cette option vérifie que chaque Shape porte <em>seulement</em> les propriétés déclarées explicitement dans le fichier de Shapes. \
 En d'autres termes, cela vérifie que les propriétés sont "bien placées" sur leur domaine, et qu'aucune autre propriété que celles explicitement listées n'est présente dans les données. La validation opère en "monde fermé". \
 Techniquement, cette option ajoute <code>sh:closed true; sh:ignoreProperties (rdf:type);</code> sur toutes les NodeShape qui ne sont pas déjà fermées.
validate.options.createDetails=Inclure les détails
validate.options.createDetails.help=Activer cette option pour inclure dans le rapport de validation les causes des violations générées par les sh:or, sh:and, sh:node or sh:qualifiedValueShape

validate.validate=Valider


catalog.home.card-title=Obtenez un badge de validation pour votre dossier
catalog.home.card-title.help=Si votre fichier Shape est enregistré dans le <a href="<c:url value="/shapes-catalog" />"> catalogue Shapes </a> et vous validez une fichier en ligne, obtenez un Markdown ou un code URL pour afficher un badge de validation sur votre projet Github ! Voir <a href="https://github.com/sparna-git/SHACL-Catalog">un exemple ici</a>.
catalog.home.validate=Commencer à valider

catalog.title=Catalogue de Shapes
catalog.entry.addedOn=Ajouté le
catalog.entry.addedOn.by=par


catalog-rules.home.card-title=Enregistrer les règles SHACL dans le catalogue SHACL
catalog-rules.home.card-title.help=Le catalogue SHACL est un ensemble organisé de fichiers SHACL réutilisables en ligne. Ajoutez le vôtre !
catalog-rules.home.validate=catalogue de formes

catalog-rules.title=Catalogue de Règles
catalog-rules.entry.addedOn=Ajouté le
catalog-rules.entry.addedOn.by=par

convert.home.card-title=Appliquer les règles SHACL génériques
convert.home.card-title.help=Vous voulez plus que les règles OWL-2-SHACL ? appliquez des <a href="https://www.w3.org/TR/shacl-af/#rules">règles SHACL</a> personnalisées à vos données pour en dériver de nouvelles.</p>
convert.home.validate-rdf=Convertir RDF à l'aide de règles
convert.home.validate-shaclrules=Afficher les règles SHACL

convert.title=Transformation RDF
convert.title.convertWith=Transformer avec
convert.inputData.title=RDF à transformer
convert.inputData.upload=Uploader
convert.inputData.upload.select=Sélectionner un fichier
convert.inputData.upload.change=Modifier
convert.inputData.upload.remove=Annuler
convert.inputData.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML. Vous pouvez aussi envoyer des fichiers <em>zip</em>.
convert.inputData.url=URL
convert.inputData.url.placeholder=http://... (URL du fichier RDF)
convert.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
convert.inputData.inline=Copier/coller le RDF
convert.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

convert.shapes.title=Règles
convert.shapes.upload=Uploader
convert.shapes.upload.select=Sélectionner un fichier
convert.shapes.upload.change=Modifier
convert.shapes.upload.remove=Annuler
convert.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
convert.shapes.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
convert.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
convert.shapes.url=URL
convert.shapes.url.placeholder=http://... (URL du fichier SHACL)
convert.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
convert.shapes.inline=Copier/coller les règles SHACL
convert.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

convert.options.title=Options

convert.submit=Convertir




draw.home.card-title=Dessiner des diagrammes UML à partir de shapes
draw.home.card-title.help=Vous cherchez quelque chose de plus visuel ? Générez des diagrammes UML en SVG à partir de votre fichier SHACL ! Marche avec <a href="https://plantuml.com/">PlantUML.
draw.home.validate=Dessiner

draw.title=Dessiner mon SHACL en UML
draw.shapes.title=Règles
draw.shapes.upload=Uploader
draw.shapes.upload.select=Sélectionner un fichier
draw.shapes.upload.change=Modifier
draw.shapes.upload.remove=Annuler
draw.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
draw.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue de shapes</a>
draw.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalogue dans Github</a>.
draw.shapes.url=URL
draw.shapes.url.placeholder=http://... (URL du fichier SHACL)
draw.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
draw.shapes.inline=Copier/coller les règles SHACL
draw.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

draw.options.title=Options
draw.options.format=Format des sortie

draw.submit=Dessiner


doc.home.card-title=Générer la Documentation
doc.home.card-title.help=Générer  application-profile style documentation, with tables of allowed properties for each class, avec votre defition SHACL definition. Ready to be shipped to the developers !
doc.home.validate=Générer Documentation

doc.title=Générer une documentation SHACL
doc.shapes.title=Règles
doc.shapes.upload=Uploader
doc.shapes.upload.select=Sélectionner un fichier
doc.shapes.upload.change=Modifier
doc.shapes.upload.remove=Annuler
doc.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
doc.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue de shapes</a>
doc.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalogue dans Github</a>.
doc.shapes.url=URL
doc.shapes.url.placeholder=http://... (URL du fichier SHACL)
doc.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
doc.shapes.inline=Copier/coller les règles SHACL
doc.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

doc.options.title=Options

doc.submit=Générer la doc



rules.title=Afficher des règles
rules.shapes.title=Règles
rules.shapes.upload=Uploader
rules.shapes.upload.select=Sélectionner un fichier
rules.shapes.upload.change=Modifier
rules.shapes.upload.remove=Annuler
rules.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
rules.shapes.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
rules.shapes.catalog.help=Pour que vos règles apparaissent dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
rules.shapes.url=URL
rules.shapes.url.placeholder=http://... (URL du fichier de règles)
rules.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
rules.shapes.inline=Copier/coller les règles SHACL
rules.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

rules.options.title=Options

rules.submit=Afficher


sparql.home.card-title=Générer le code SPARQL
sparql.home.card-title.help=Générer des requêtes SPARQL à partir de votre fichier SHACL! .
sparql.home.validate=Générer

sparql.title=Requêtes Sparql 
sparql.inputData.title=Shape
sparql.inputData.upload=Uploader
sparql.inputData.upload.select=Sélectionner un fichier
sparql.inputData.upload.change=Modifier
sparql.inputData.upload.remove=Annuler
sparql.inputData.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .ttl
sparql.inputData.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
sparql.inputData.catalog.help=Pour que vos règles apparaissent dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
sparql.inputData.url=URL
sparql.inputData.url.placeholder=http://... (URL du fichier de règles)
sparql.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
sparql.inputData.inline=Copier/coller les règles SHACL
sparql.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

sparql.shapes.title=Shape Optional
sparql.shapes.upload=Uploader
sparql.shapes.upload.select=Sélectionner un fichier
sparql.shapes.upload.change=Modifier
sparql.shapes.upload.remove=Annuler
sparql.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .ttl
sparql.shapes.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
sparql.shapes.catalog.help=Pour que vos règles apparaissent dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
sparql.shapes.url=URL
sparql.shapes.url.placeholder=http://... (URL du fichier de règles)
sparql.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
sparql.shapes.inline=Copier/coller les règles SHACL
sparql.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

sparql.options.title=Options
sparql.options.formatStandard=Formate requête Standard
sparql.options.formatStandard.help=Générer un fichier pour chaque requête
sparql.options.formatCombine=Formate requête combinée
sparql.options.formatCombine.help=Générer un fichier utilisant la clause UNION, si la boîte est desactive,le processus generer un fichier pour chaque requête 

sparql.validate=Télécharger


validate.home.owl.title=Convertir OWL à SHACL
validate.home.owl.title.help=Vous avez donc un fichier OWL et vous aimeriez en dériver SHACL ? utilisez les règles de conversion OWL vers SHACL pour générer votre fichier de contraintes SHACL.
validate.home.owl.validate=Convertir OWL à SHACL


