window.app=SHACL Play!

navbar.brand=SHACL Play!

navbar.menu1=SHACL
navbar.menu1.doc.label=Générer une documentation
navbar.menu1.doc.tooltip=Générer une documentation de type "profil d'application", avec une table des propriétés autorisées pour chaque classe, à partir de votre définition SHACL. Une doc prête à envoyer aux développeurs !
navbar.menu1.draw.label=Générer un diagramme UML
navbar.menu1.draw.tooltip=Vous êtes du genre visuel ? Générez des diagrammes UML en SVG à partir de votre fichier SHACL ! Basé sur PlantUML.
navbar.menu1.context.label=Générer un @context JSON-LD
navbar.menu1.context.tooltip=Dérive les clés JSON à partir des NodeShapes et des PropertyShapes.
navbar.menu1.sparql.label=Générer des requêtes SPARQL
navbar.menu1.sparql.tooltip=Générer des requêtes SPARQL pour extraire un sous-ensemble de données conformes à une spécification SHACL.
navbar.menu1.shapes-catalog.label=Catalogue SHACL
navbar.menu1.shapes-catalog.tooltip=Le catalogue SHACL est un annuaire de fichiers SHACL réutilisables en ligne. Ajoutez le vôtre !

navbar.menu2=Données RDF  
navbar.menu2.validate.label=Valider des données
navbar.menu2.validate.tooltip=Obtenez un rapport de validation de données RDF à partir de règles SHACL. Validez un RDF local ou des données RDF accessibles en ligne.
navbar.menu2.generate.label=Générer du SHACL
navbar.menu2.generate.tooltip=Générer notre specification SHACL à partir de un jeu de données RDF.
navbar.menu2.badge.label=Générer un badge de validation
navbar.menu2.badge.tooltip=Si votre fichier SHACL est enregistré dans le catalogue de Shapes et que vous validez un RDF en ligne, récupérez un code d'affichage de badge de validation pour votre projet Github !.

navbar.menu3=Règles SHACL
navbar.menu3.from-owl.label=Convertir du RDF à partir de règles
navbar.menu3.from-owl.tooltip=Vous pouvez dériver des règles SHACL à partir d'une ontologie OWL. Vous pouvez aussi appliquer des règles custom.
navbar.menu3.rules.label=Afficher un jeu de règles
navbar.menu3.rules.tooltip=Générer une documentation HTML à partir d'un fichier contenant des règles SHACL rules.
navbar.menu3.rules-catalog.label=Catalogue SHACL Rules
navbar.menu3.rules-catalog.tooltip=Le catalogue SHACL Rules est un annuaire de fichiers SHACL Rules réutilisables en ligne. Ajoutez le vôtre !


home.shortdesc=SHACL Play de <a href="http://sparna.fr/">Sparna</a> est une suite d'outils en ligne gratuite pour travailler avec <a href="https://www.w3.org/TR/shacl/" target="_blank">SHACL</a>. SHACL Play! intègre l'<a href="https://github.com/TopQuadrant/shacl" target="_blank">l'API SHACL</a> de <a href="https://www.topquadrant.com/" target="_blank">TopQuadrant</a>.

home.card1.title=Outils SHACL
home.card1.description=Travailler à partir d'un fichier de spécification SHACL : générer une doc, un diagramme, un fichier de context, des requêtes SPARQL d'extraction

home.card2.title=Outils RDF
home.card2.description=Travailler à partir d'un jeu de données RDF : valider la conformité par rapport à un fichier SHACL, dériver automatiquement un profil SHACL.

home.card3.title=Outils SHACL Rules
home.card3.description=Travailler à partir de <a href="https://www.w3.org/TR/shacl-af/#rules">SHACL rules</a> : convertir des données RDF avec des règles, afficher des règles.



validate.title=Validation RDF
validate.title.validateWith=Valider avec
validate.inputData.title=RDF à valider
validate.inputData.upload=Uploader
validate.inputData.upload.select=Sélectionner un fichier
validate.inputData.upload.change=Modifier
validate.inputData.upload.remove=Annuler
validate.inputData.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML. Vous pouvez aussi envoyer des fichiers <em>zip</em>.
validate.inputData.url=URL
validate.inputData.url.placeholder=http://... (URL du fichier RDF)
validate.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus. <br />\
Par exemple, vous pouvez essayer de valider <a href="#" onclick="$('#inputUrl').val('https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl');enabledInput('inputUrl');" title="https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl">les données du catalogue de Shapes</a>\
, avec la Shape "SHACL Play! Catalog Shapes" dans la liste ci-dessous.
validate.inputData.inline=Copier/coller le RDF
validate.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

validate.shapes.title=Shapes
validate.shapes.upload=Uploader
validate.shapes.upload.select=Sélectionner un fichier
validate.shapes.upload.change=Modifier
validate.shapes.upload.remove=Annuler
validate.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
validate.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue</a>
validate.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shacl-catalog.ttl">catalogue dans Github</a>.
validate.shapes.url=URL
validate.shapes.url.placeholder=http://... (URL du fichier SHACL)
validate.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
validate.shapes.inline=Copier/coller les règles SHACL
validate.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

validate.options.title=Options
validate.options.infer=Activer l'inférence OWL-Micro avant validation
validate.options.infer.help=Si les données à valider contiennent l'ontologie, vous pouvez activer une <a href="https://jena.apache.org/documentation/inference/#owl">inférence OWL-Micro</a> sur les données avant d'exécuter la validation. /!\ l'inférence peut être très longue
validate.options.closeShapes=Monde fermé (ajoute sh:closed sur les NodeShape)
validate.options.closeShapes.help=Cette option vérifie que chaque Shape porte <em>seulement</em> les propriétés déclarées explicitement dans le fichier de Shapes. \
 En d'autres termes, cela vérifie que les propriétés sont "bien placées" sur leur domaine, et qu'aucune autre propriété que celles explicitement listées n'est présente dans les données. La validation opère en "monde fermé". \
 Techniquement, cette option ajoute <code>sh:closed true; sh:ignoreProperties (rdf:type);</code> sur toutes les NodeShape qui ne sont pas déjà fermées.
validate.options.createDetails=Inclure les détails
validate.options.createDetails.help=Activer cette option pour inclure dans le rapport de validation les causes des violations générées par les sh:or, sh:and, sh:node or sh:qualifiedValueShape

validate.validate=Valider


catalog.title=Catalogue de Shapes
catalog.entry.addedOn=Ajouté le
catalog.entry.addedOn.by=par


catalog-rules.title=Catalogue de Règles
catalog-rules.entry.addedOn=Ajouté le
catalog-rules.entry.addedOn.by=par

convert.title=Transformation RDF
convert.title.convertWith=Transformer avec
convert.inputData.title=RDF à transformer
convert.inputData.upload=Uploader
convert.inputData.upload.select=Sélectionner un fichier
convert.inputData.upload.change=Modifier
convert.inputData.upload.remove=Annuler
convert.inputData.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML. Vous pouvez aussi envoyer des fichiers <em>zip</em>.
convert.inputData.url=URL
convert.inputData.url.placeholder=http://... (URL du fichier RDF)
convert.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
convert.inputData.inline=Copier/coller le RDF
convert.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

convert.shapes.title=Règles
convert.shapes.upload=Uploader
convert.shapes.upload.select=Sélectionner un fichier
convert.shapes.upload.change=Modifier
convert.shapes.upload.remove=Annuler
convert.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
convert.shapes.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
convert.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
convert.shapes.url=URL
convert.shapes.url.placeholder=http://... (URL du fichier SHACL)
convert.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
convert.shapes.inline=Copier/coller les règles SHACL
convert.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

convert.options.title=Options

convert.submit=Convertir


draw.title=Dessiner mon SHACL en UML
draw.shapes.title=Règles
draw.shapes.upload=Uploader
draw.shapes.upload.select=Sélectionner un fichier
draw.shapes.upload.change=Modifier
draw.shapes.upload.remove=Annuler
draw.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
draw.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue de shapes</a>
draw.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalogue dans Github</a>.
draw.shapes.url=URL
draw.shapes.url.placeholder=http://... (URL du fichier SHACL)
draw.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
draw.shapes.inline=Copier/coller les règles SHACL
draw.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

draw.options.title=Options
draw.options.format=Format

draw.submit=Dessiner


doc.title=Générer une documentation SHACL
doc.shapes.title=Règles
doc.shapes.upload=Uploader
doc.shapes.upload.select=Sélectionner un fichier
doc.shapes.upload.change=Modifier
doc.shapes.upload.remove=Annuler
doc.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
doc.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue de shapes</a>
doc.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalogue dans Github</a>.
doc.shapes.url=URL
doc.shapes.url.placeholder=http://... (URL du fichier SHACL)
doc.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
doc.shapes.inline=Copier/coller les règles SHACL
doc.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

doc.language.title=Quelle est la langue par défaut des libellés?
doc.language.option=Sélectionner/entrez la langue

doc.options.title=Options
doc.options.includeDiagram=Inclure le diagramme UML dans la documentation
doc.options.includeDiagram.help=Vous pouvez inclure un diagramme UML dans le fichier de documentation produit. Cependant tous les fichiers SHACL ne permettent pas de produire de beaux diagrammes UML.

doc.options.logo=Insérez un logo
doc.options.logo.placeholder=http://... (URL du fichier)
doc.options.logo.help=Le logo doit être accessible à une URL. Le format SVG n'est pas supporté pour la génération de PDF

doc.options.format=Format

doc.options.printPDF=Imprimer en PDF
doc.options.printPDF.help=(note : les diagrammes UML peuvent être un peu petits dans le PDF)

doc.submit=Générer la doc


context.title=Générer un JSON-LD
context.shapes.title=Dataset

context.shapes.upload=A partir d'un fichier
context.shapes.upload.select=Sélectionner un fichier
context.shapes.upload.change=Modifier
context.shapes.upload.remove=Annuler
context.shapes.upload.help=Vous pouvez sélectionner plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML

context.shapes.url=URL
context.shapes.url.placeholder=http://... (URL du fichier RDF)
context.shapes.url.help=URL d'un RDF
context.options.format=Format de sortie
context.options.title=Options
context.options.Ocurrencesinstances=Compter les instances/occurrences
context.options.Ocurrencesinstances.help=

context.submit=Générer




rules.title=Afficher des règles
rules.shapes.title=Règles
rules.shapes.upload=Uploader
rules.shapes.upload.select=Sélectionner un fichier
rules.shapes.upload.change=Modifier
rules.shapes.upload.remove=Annuler
rules.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
rules.shapes.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
rules.shapes.catalog.help=Pour que vos règles apparaissent dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
rules.shapes.url=URL
rules.shapes.url.placeholder=http://... (URL du fichier de règles)
rules.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
rules.shapes.inline=Copier/coller les règles SHACL
rules.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

rules.options.title=Options

rules.submit=Afficher


sparql.title=Requêtes SPARQL 
sparql.inputData.title=Shapes
sparql.inputData.upload=Uploader
sparql.inputData.upload.select=Sélectionner un fichier
sparql.inputData.upload.change=Modifier
sparql.inputData.upload.remove=Annuler
sparql.inputData.upload.help=Vous pouvez sélectionner plusieurs fichiers d'un coup. Extensions supportées : .ttl
sparql.inputData.url=URL
sparql.inputData.url.placeholder=http://... (URL du fichier de règles)
sparql.inputData.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
sparql.inputData.inline=Copier/coller les règles SHACL
sparql.inputData.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

sparql.shapes.title=Surcharge des targets
sparql.shapes.upload=Uploader
sparql.shapes.upload.select=Sélectionner un fichier
sparql.shapes.upload.change=Modifier
sparql.shapes.upload.remove=Annuler
sparql.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .ttl
sparql.shapes.url=URL
sparql.shapes.url.placeholder=http://... (URL du fichier de règles)
sparql.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
sparql.shapes.inline=Copier/coller les règles SHACL
sparql.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.

sparql.options.title=Options
sparql.options.formatCombine=Une seule requête combinée
sparql.options.formatCombine.help=Génére une requête par target en utilisant la clause UNION. Par défaut, le processus génère un fichier pour chaque chemin possible dans les Shapes 

sparql.validate=Générer le SPARQL



generate.title=Générer un profil SHACL
generate.shapes.title=Dataset

generate.shapes.upload=A partir d'un fichier
generate.shapes.upload.select=Sélectionner un fichier
generate.shapes.upload.change=Modifier
generate.shapes.upload.remove=Annuler
generate.shapes.upload.help=Vous pouvez sélectionner plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML

generate.shapes.url=A partir d'un service SPARQL
generate.shapes.url.placeholder=http://... (URL d'un endpoint SPARQL)
generate.shapes.url.help=URL d'un service SPARQL public
generate.options.format=Format de sortie
generate.options.title=Options
generate.options.Ocurrencesinstances=Compter les instances/occurrences
generate.options.Ocurrencesinstances.help=

generate.submit=Generate


excel.title=Generate un fichier Excel
excel.shapes.title=Shapes

excel.shapes.upload.template=Upload Template
excel.shapes.upload.template.select=Sélectionner un fichier
excel.shapes.upload.template.change=Modifier
excel.shapes.upload.template.remove=Annuler
excel.shapes.upload.template.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
excel.shapes.upload.source=Upload Source
excel.shapes.upload.source.select=Sélectionner un fichier
excel.shapes.upload.source.change=Modifier
excel.shapes.upload.source.remove=Annuler
excel.shapes.upload.source.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML

excel.shapes.url.template=URL Template
excel.shapes.url.template.placeholder=http://... (URL of SHACL Rules file)
excel.shapes.url.template.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.

excel.shapes.url.source=URL Source
excel.shapes.url.source.placeholder=http://... (URL of SHACL Rules file)
excel.shapes.url.source.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.

excel.options.title=Options

excel.submit=Generate