window.app=SHACL Play!

navbar.brand=SHACL Play!
navbar.validate=Validate
navbar.shapes-catalog=Shapes Catalog
navbar.rules-catalog=Rules Catalog
navbar.convert=Convert
navbar.draw=Draw
navbar.doc=Generate documentation
navbar.rules=Display rules
navbar.sparql=SPARQL Query


home.validate.card-title=Validate RDF with SHACL
home.validate.card-title.help=Get a human-readable report from a SHACL validation. \ Upload your RDF or validate online RDF file at some URL. Also download a CSV report, or raw SHACL Turtle report.
home.validate.button=VALIDATE
home.draw.card-title=Draw UML diagrams from Shapes
home.draw.card-title.help=Looking for something more visual ? Generate UML diagrams in SVG from your SHACL file ! Works with <a href="https://plantuml.com/">PlantUML.
home.draw.button=Draw
home.doc.card-title=Generate documentation
home.doc.card-title.help=Generate application-profile style documentation, with tables of allowed properties for each class, from your SHACL definition. Ready to be shipped to the developers !
home.doc.button=Generate doc
home.catalog.card-title=Get validation badge for your file
home.catalog.card-title.help=If your Shape file is registered in the <a href="<c:url value="/shapes-catalog" /> "> Shapes catalog </a> and you validate an online file, get Markdown or URL code to display a validation badge on your Github project ! See <a href="https://github.com/sparna-git/SHACL-Catalog">an exemple here</a>.
home.catalog.button=Start validating
home.catalog-rules.card-title=Register SHACL rules in SHACL catalog
home.catalog-rules.card-title.help=The SHACL catalog is a curated set of online reusable SHACL files. Add yours !
home.catalog-rules.button=Browse shapes catalog
home.from-owl.title=Convert OWL to SHACL
home.from-owl.title.help=So you have an OWL file and you would like to derive SHACL from it ? use the OWL-to-SHACL conversion rules to generate your SHACL constraint file.
home.from-owl.button=Convert OWL to SHACL
home.convert.card-title=Apply generic SHACL Rules
home.convert.card-title.help=Want more than OWL-2-SHACL rules ? apply custom <a href="https://www.w3.org/TR/shacl-af/#rules">SHACL Rules</a> on your data to derive new data.</p>
home.convert.button-rdf=Convert RDF using Rules
home.convert.button-shaclrules=Display SHACL Rules
home.sparql.card-title=Generate Sparql Query
home.sparql.card-title.help=Generate application-profile style documentation, with tables of allowed properties for each class, from your SHACL definition. Ready to be shipped to the developers !
home.sparql.button=Generate Query


validate.title=Validate RDF data
validate.title.validateWith=Validate with
validate.inputData.title=Input Data
validate.inputData.upload=Upload
validate.inputData.upload.select=Select file
validate.inputData.upload.change=Change
validate.inputData.upload.remove=Remove
validate.inputData.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML. You can also send <em>zip files</em>.
validate.inputData.url=URL
validate.inputData.url.placeholder=http://... (URL of RDF file)
validate.inputData.url.help=URL of an RDF file. Same extensions as file upload are supported. <br />\
For an example, you can try validating the <a href="#" onclick="$('#inputUrl').val('https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl');enabledInput('inputUrl');" title="https://raw.githubusercontent.com/sparna-git/SHACL-Catalog/master/shacl-catalog.ttl">Shapes catalog data</a>\
, against the Shape "SHACL Play! Catalog Shapes" in the list below.
validate.inputData.inline=Copy/paste RDF content
validate.inputData.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

validate.shapes.title=Shapes
validate.shapes.upload=Upload
validate.shapes.upload.select=Select file
validate.shapes.upload.change=Change
validate.shapes.upload.remove=Remove
validate.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
validate.shapes.catalog=Select from <a href="shapes-catalog">Shape catalog</a>
validate.shapes.catalog.help=To have your SHACL in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shacl-catalog.ttl">catalog Github repository</a>.
validate.shapes.url=URL
validate.shapes.url.placeholder=http://... (URL of SHACL file)
validate.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
validate.shapes.inline=Copy/paste SHACL content
validate.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

validate.options.title=Options
validate.options.infer=Activate OWL-Micro inference before validation
validate.options.infer.help=Use this option if the data to be validated contains ontology triples and you need to apply <a href="https://jena.apache.org/documentation/inference/#owl">OWL-Micro inference</a> on the data before it is validated. /!\ Inference can take a very long time
validate.options.closeShapes=Closed World (adds sh:closed to NodeShapes)
validate.options.closeShapes.help=Check this option to verify that each shape uses <em>only</em> properties explicitely declared in the shape file. \
 In other words, this verify that are no misplaced properties, and ensures no properties other than those explicitely listed are present in the data. It makes validation operate in "closed world". \
 Technically, this adds a <code>sh:closed true; sh:ignoreProperties (rdf:type);</code> on every NodeShape that is not closed already.
validate.options.createDetails=Include details
validate.options.createDetails.help=Enable this option to also include in the validation report the "root" cause of a validation result triggered by an sh:or, sh:and, sh:node or sh:qualifiedNodeShape.


validate.validate=Validate




catalog.title=Shapes Catalog
catalog.entry.addedOn=Added on
catalog.entry.addedOn.by=by


catalog-rules.title=Rules Catalog
catalog-rules.entry.addedOn=Added on
catalog-rules.entry.addedOn.by=by


convert.title=Transform RDF data
convert.title.validateWith=Transform with
convert.inputData.title=Input Data
convert.inputData.upload=Upload
convert.inputData.upload.select=Select file
convert.inputData.upload.change=Change
convert.inputData.upload.remove=Remove
convert.inputData.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML. You can also send <em>zip files</em>.
convert.inputData.url=URL
convert.inputData.url.placeholder=http://... (URL of RDF file)
convert.inputData.url.help=URL of an RDF file. Same extensions as file upload are supported.
convert.inputData.inline=Copy/paste RDF content
convert.inputData.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

convert.shapes.title=Rules
convert.shapes.upload=Upload
convert.shapes.upload.select=Select file
convert.shapes.upload.change=Change
convert.shapes.upload.remove=Remove
convert.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
convert.shapes.catalog=Select from <a href="rules-catalog">Rules catalog</a>
convert.shapes.catalog.help=To have your RuleSet in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalog Github repository</a>.
convert.shapes.url=URL
convert.shapes.url.placeholder=http://... (URL of SHACL Rules file)
convert.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
convert.shapes.inline=Copy/paste SHACL Rules content
convert.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

convert.options.title=Options

convert.submit=Convert


draw.title=Draw UML from SHACL
draw.shapes.title=Shapes
draw.shapes.upload=Upload
draw.shapes.upload.select=Select file
draw.shapes.upload.change=Change
draw.shapes.upload.remove=Remove
draw.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
draw.shapes.catalog=Select from <a href="shapes-catalog">Shapes catalog</a>
draw.shapes.catalog.help=To have your Shapes in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalog Github repository</a>.
draw.shapes.url=URL
draw.shapes.url.placeholder=http://... (URL of SHACL file)
draw.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
draw.shapes.inline=Copy/paste SHACL Rules content
draw.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

draw.options.title=Options
draw.options.format=Output format

draw.submit=Draw

doc.title=SHACL documentation
doc.shapes.title=Shapes
doc.shapes.upload=Upload
doc.shapes.upload.select=Select file
doc.shapes.upload.change=Change
doc.shapes.upload.remove=Remove
doc.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
doc.shapes.catalog=Select from <a href="shapes-catalog">Shapes catalog</a>
doc.shapes.catalog.help=To have your Shapes in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalog Github repository</a>.
doc.shapes.url=URL
doc.shapes.url.placeholder=http://... (URL of SHACL file)
doc.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
doc.shapes.inline=Copy/paste SHACL Rules content
doc.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

doc.language.title=What is the default language to generate the documentation?
doc.language.option=Specify language code

doc.options.title=Options
doc.options.includeDiagram=Include diagram in the generated documentation
doc.options.includeDiagram.help=Check if you want the UML diagram to be included in the generated documentation. Not all structure of Shapes file can produce a nice UML diagram.

doc.options.logo=Insert a logo
doc.options.logo.placeholder=http://... (URL of the logo)
doc.options.logo.help=The logo must be accessible at a URL. SVG is not supported if printed in PDF.

doc.options.printPDF=Print in PDF
doc.options.printPDF.help=(note: if included, diagram can be small in the PDF)

doc.submit=Generate doc


rules.title=Rules documentation
rules.shapes.title=Rules
rules.shapes.upload=Upload
rules.shapes.upload.select=Select file
rules.shapes.upload.change=Change
rules.shapes.upload.remove=Remove
rules.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
rules.shapes.url=URL
rules.shapes.url.placeholder=http://... (URL of SHACL Rules file)
rules.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
rules.shapes.inline=Copy/paste SHACL Rules content
rules.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

rules.options.title=Options

rules.submit=Print



sparql.title=SPARQL Query generation

sparql.inputData.title=Shapes
sparql.inputData.upload=Upload
sparql.inputData.upload.select=Select file
sparql.inputData.upload.change=Change
sparql.inputData.upload.remove=Remove
sparql.inputData.upload.help=You can select multiple files. Supported extensions : .ttl
sparql.inputData.url=URL
sparql.inputData.url.placeholder=http://... (URL of SHACL file)
sparql.inputData.url.help=URL of a SHACL file. Same extensions as file upload are supported.
sparql.inputData.inline=Copy/Paste SHACL rules
sparql.inputData.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.

sparql.shapes.title=Shapes
sparql.shapes.upload=Upload
sparql.shapes.upload.select=Select file
sparql.shapes.upload.change=Change
sparql.shapes.upload.remove=Remove
sparql.shapes.upload.help=You can select multiple files. Supported extension : .ttl
sparql.shapes.url=URL
sparql.shapes.url.placeholder=http://... (URL of SHACL Rules file)
sparql.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
sparql.shapes.inline=Copy/paste SHACL Rules content
sparql.shapes.inline.help=Supported syntaxe : Turtle. We recommend Turtle.

sparql.options.title=Options
sparql.options.formatCombine=Single combined query
sparql.options.formatCombine.help=Generates a single query per initial target defined in the SHACL, using UNION clauses. By default, the process generates one query file per possible path in the shapes file.

sparql.validate=Generate SPARQL


generate.title=Generate Shacl File
generate.inputData.title=URL Service SPARQL
generate.inputData.url=Service SPARQL
generate.inputData.url.placeholder=http://... (URL of a Service SPARQL)
generate.inputData.url.help=URL of a of Service SPARQL.
generate.options.format=Format
generate.options.title=Options

generate.submit=Generate